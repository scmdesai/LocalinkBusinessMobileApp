/*
 * File: app/controller/Contacts.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Contact.controller.Contacts', {
	extend: 'Ext.app.Controller',

	requires: [
		'Ext.MessageBox',
		'Ext.ActionSheet'
	],

	config: {
		stores: [
			'MyJsonPStore',
			'MyDealsStore',
			'MyJsonPStore1',
			'UserPreferences'
		],

		refs: {
			contactinfo: {
				autoCreate: true,
				selector: 'contactinfo',
				xtype: 'contactinfo'
			},
			contactlist: {
				autoCreate: true,
				selector: 'contactlist',
				xtype: 'contactlist'
			},
			dealsinfo: {
				autoCreate: true,
				selector: 'dealsinfo',
				xtype: 'listofdeals'
			},
			dealpicture: {
				autoCreate: true,
				selector: 'dealpicture',
				xtype: 'dealpicture'
			},
			phoneNumber: 'textfield#phoneNumber',
			address: 'textfield#address',
			mycontainer1: {
				selector: 'container#mycontainer1',
				xtype: 'favoriteview'
			},
			favoriteview: 'dataview#favoriteview',
			editButton: 'button#editButton',
			dealsPanel: 'panel#dealsPanel',
			contactform: {
				autoCreate: true,
				selector: 'contactform',
				xtype: 'contactform'
			},
			formCancelButton: 'button#formCancelButton',
			saveContactButton: 'button#saveContactButton',
			backFromDealsPanelButton: 'button#backFromDealsPanelButton',
			uploadDealBtn: 'button#uploadDealBtn',
			deleteDealBtn: 'button#deleteDealBtn',
			share: 'button#share'
		},

		control: {
			"dataview": {
				itemtap: 'onContactItemTap'
			},
			"button#infoBackBtn": {
				tap: 'onInfoBackBtnTapHome'
			},
			"contactpic": {
				change: 'onContactPickerChange'
			},
			"list": {
				activate: 'onListActivate'
			},
			"button#dealBackBtn": {
				tap: 'onDealBackBtnTap'
			},
			"textfield#phoneNumber": {
				focus: 'onPhoneNumberFocus'
			},
			"listofdeals": {
				itemtap: 'onListOfDealsItemTap'
			},
			"container#mycontainer1": {
				activate: 'onMycontainer1Activate'
			},
			"textfield#address": {
				focus: 'onAddressFocus'
			},
			"button#editButton": {
				tap: 'onEditButtonTap'
			},
			"button#saveContactButton": {
				tap: 'onSaveContactButtonTap'
			},
			"button#cancelButton": {
				tap: 'onCancelButtonTap'
			},
			"button#BackFromDealsPanel": {
				tap: 'onBackFromDealsPanelTap'
			},
			"button#UploadDeal": {
				tap: 'onUploadDealTap'
			},
			"button#DeleteDeal": {
				tap: 'onDeleteDealTap'
			},
			"button#share": {
				tap: 'onShareTap'
			}
		}
	},

	onContactItemTap: function(dataview, index, target, record, e, eOpts) {


		var info = this.getContactinfo();
		info.setRecord(record);
		Ext.Viewport.setActiveItem(info);
		//console.log(info);
	},

	onInfoBackBtnTapHome: function(button, e, eOpts) {
		//workaround to fix the warning of destroy element in deleteDeals
		/*var el = document.getElementById('ListOfDeals');
		  el.parentNode.removeChild(el);
		var btn = document.getElementById('DeleteDeal');
			btn.parentNode.removeChild(btn);*/
		/*var ds = Ext.StoreManager.lookup('MyJsonPStore');
		ds.clearFilter() ;*/

		Ext.Viewport.setActiveItem(0);

		var store = Ext.getStore('UserPreferences');

		                var records= [];





		                var ds = Ext.getStore('MyJsonPStore1');
		                ds.clearFilter();
		               //store.clearFilter();



		               store.each(function(rec)
		                {



		                        if(rec.get('isFavorite')===true) {

		                            records.push(rec.get('customerId'));


		                        }
		                    else {
		                        Ext.Array.remove(records,rec.get('customerId'));
		                    }



		                });


		                ds.filterBy(function(record){
		                    return Ext.Array.indexOf(records, record.get('customerId')) !== -1;

		                                                      }, this);

	},

	onContactPickerChange: function(picker, value, eOpts) {
		var currentForm = Ext.Viewport.getActiveItem();
		var record = currentForm.getRecord();
		if (record) {
		    record.set('picture', value);
		    record.commit();
		    currentForm.setRecord(record);
		}

	},

	onListActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
		var ds = Ext.StoreManager.lookup('MyJsonPStore');
		ds.clearFilter();
	},

	onDealBackBtnTap: function(button, e, eOpts) {


		var ds = Ext.StoreManager.lookup('MyJsonPStore');
		ds.clearFilter() ;
		var dealRecord = this.getContactinfo().getRecord() ;
		//console.log("Deal Record is:") ;
		//console.log(dealRecord) ;
		var customerId = dealRecord.get('customerId');
		//console.log("Customer Id is " + customerId) ;
		ds.filter('customerId', customerId);

		var customerData = ds.getData().getAt(0) ;
		//console.log("Customer Data is:") ;
		//console.log(customerData) ;

		var info = this.getContactinfo();
		info.setRecord(customerData);
		ds.clearFilter() ;
		Ext.Viewport.setActiveItem(info);

		//Ext.Viewport.setActiveItem('contactinfo') ;


		//var btn = document.getElementById('DeleteDeal');
		/*if(btn){
		btn.parentNode.removeChild(btn);
			console.log('Removing btn from deal back button');
		}*/
		var el = Ext.getCmp('ListOfDeals');
		if(el) {
			el.destroy();
		}
				//el.parentNode.removeChild(el);
				var btn = Ext.getCmp('DeleteDeal');

		if(btn) {
					btn.destroy();
		}

	},

	onPhoneNumberFocus: function(textfield, e, eOpts) {
		console.log(e);
		numberToDial = textfield.getValue();
		textfield.blur();
		e.destroy();
		e.stopEvent();
		window.location = 'tel:'+ numberToDial ;
	},

	onListOfDealsItemTap: function(dataview, index, target, record, e, eOpts) {

		if (e.target.type === 'checkbox') {

			var store = Ext.getStore('MyDealsStore');


		var el=dataview.getParent();



		Ext.Viewport.setActiveItem(el);

		    var recordsToDelete = [];
			var checkboxes = document.getElementsByName('checkbox');

			checkboxes[index].addEventListener('change',function(){
				//console.log('Checkbox Changed' + index);

			if (checkboxes[index].checked) {

		       // console.log(recordsToDelete.length);
				recordsToDelete.push(record);


		  }
		 else {

		       //console.log(recordsToDelete.length);
			   Ext.Array.remove(recordsToDelete,record);




			   }




		});
			var btn = Ext.getCmp('DeleteDeal');

				btn.addListener('tap', function(){


					store.remove(recordsToDelete);



		});
		btn.addAfterListener('tap',function(){
			store.remove(recordsToDelete);
			//btn.destroy();
		});

		/*if(btn) {
		     btn.addAfterListener('tap',function(){
			//store.loadPage(record)
			btn.destroy();});
			//


		 // });

		}*/

		}





		else{

			//workaround to fix the warning of destroy element in deleteDeals
		var el = Ext.getCmp('ListOfDeals').destroy();
				//el.parentNode.removeChild(el);
				var btn = Ext.getCmp('DeleteDeal');


					btn.destroy();


		var pic = this.getDealpicture();
		/*console.log("Data View is: ") ;
		console.log(dataview) ;
		console.log("Index is: " + index) ;
		console.log("Target is: ") ;
		console.log(target) ;
		console.log("Event is: ") ;
		console.log(e) ;
		console.log("Event Options is: ") ;
		console.log(eOpts) ;*/
		pic.setRecord(record);
		Ext.Viewport.setActiveItem(pic);


		}




	},

	onMycontainer1Activate: function(newActiveItem, container, oldActiveItem, eOpts) {
		var store = Ext.getStore('UserPreferences');

		                var records= [];





		                var ds = Ext.getStore('MyJsonPStore1');
		                ds.clearFilter();
		               //store.clearFilter();



		               store.each(function(rec)
		                {



		                        if(rec.get('isFavorite')===true) {

		                            records.push(rec.get('customerId'));


		                        }
		                    else {
		                        Ext.Array.remove(records,rec.get('customerId'));
		                    }



		                });


		                ds.filterBy(function(record){
		                    return Ext.Array.indexOf(records, record.get('customerId')) !== -1;

		                                                      }, this);


	},

	onAddressFocus: function(textfield, e, eOpts) {
		console.log(textfield.getValue());
		var queryString = encodeURIComponent(textfield.getValue());
		var url = 'geo:0,0?q='  + queryString;
		textfield.blur();
		e.stopEvent();
		e.destroy();
		Ext.device.Device.openURL(url);
	},

	onEditButtonTap: function(button, e, eOpts) {
		        var referrer = Ext.Viewport.getActiveItem();
		        var form = this.getContactform();
		        var info = this.getContactinfo();

		        form.referrer = referrer;
		        form.setRecord(info.getRecord());
		        Ext.Viewport.setActiveItem(form);

	},

	onSaveContactButtonTap: function(button, e, eOpts) {
		 var form = this.getContactform();
		        var errors = form.getValidationErrors();

		        if (errors.length) {
		            Ext.Msg.alert('Error', errors.join('<br/>'));
		        } else {

		            var record = form.getRecord();
		            var values;

		            var businessName = form.getAt(2).getValue();
		            var phoneNumber = form.getAt(3).getValue();
		            var address = form.getAt(4).getValue();
		            console.log(address);


		            if (record) {
		               record.set('businessName',businessName);
		                record.set('phoneNumber',phoneNumber);
		                record.set('address',address);
		                record.commit();
		                console.log(record.getData());
		                if (form.referrer) {
		                   form.referrer.setRecord(record);
		                }
		            }




		           Ext.Viewport.setActiveItem(form.referrer);
		           delete form.referrer;
		        }

	},

	onCancelButtonTap: function(button, e, eOpts) {
		var form = this.getContactform();
		        Ext.Viewport.setActiveItem(form.referrer);
		        delete form.referrer;

	},

	onBackFromDealsPanelTap: function(button, e, eOpts) {


		var ds = Ext.StoreManager.lookup('MyJsonPStore');
		ds.clearFilter() ;
		var dealRecord = this.getContactinfo().getRecord() ;
		//console.log("Deal Record is:") ;
		//console.log(dealRecord) ;
		var customerId = dealRecord.get('customerId');
		//console.log("Customer Id is " + customerId) ;
		ds.filter('customerId', customerId);

		var customerData = ds.getData().getAt(0) ;
		//console.log("Customer Data is:") ;
		//console.log(customerData) ;

		var info = this.getContactinfo();
		info.setRecord(customerData);
		ds.clearFilter() ;
		Ext.Viewport.setActiveItem(info);

		//workaround to fix the warning of destroy element in deleteDeals
		var el = Ext.getCmp('ListOfDeals').destroy();
		//el.parentNode.removeChild(el);
		var btn = Ext.getCmp('DeleteDeal');


			btn.destroy();




	},

	onUploadDealTap: function(button, e, eOpts) {
		var actionSheet = new Ext.ActionSheet({
				items: [{
					text: 'Camera',
					scope : this,
					handler : function(){
						actionSheet.hide();
		                /* phonegap camera */
		                navigator.camera.getPicture(uploadPhoto,null,{sourceType:1,quality:60});
		                function uploadPhoto(data){
		                // this is where you would send the image file to server

		                //output image to screen
		                cameraPic.src = "data:image/jpeg;base64," + data;

		                navigator.notification.alert(
		                    'Your Photo has been uploaded', // message
		                       okay,                           // callback
		                    'Photo Uploaded',               // title
		                    'OK'                            // buttonName
		                );

		               function okay(){
		                    // Do something
		                }
		              }
					}
		        },{
		        text : 'Photo Album',
		        scope : this,
		        handler : function(){
		            actionSheet.hide();
		            navigator.camera.getPicture(uploadPhoto,null,{sourceType:Camera.PictureSourceType.PHOTOLIBRARY,quality:60});
		             function uploadPhoto(data){
		                // this is where you would send the image file to server

		                //output image to screen
		                cameraPic.src = "data:image/jpeg;base64," + data;

		                navigator.notification.alert(
		                    'Your Photo has been uploaded', // message
		                       okay,                           // callback
		                    'Photo Uploaded',               // title
		                    'OK'                            // buttonName
		                );

		               function okay(){
		                    // Do something
		                }
		              }
		        }
		     }
		   ]

		 });
		Ext.Viewport.add(actionSheet);
		        actionSheet.show();
	},

	onDeleteDealTap: function(button, e, eOpts) {
		   var el = document.getElementById('ListOfDeals');
		   el.setAttribute('class','checkbox_visible');

























	},

	onShareTap: function(button, e, eOpts) {
		window.plugins.socialsharing('Message via Facebook', null /* img */, null /* url */, function() {console.log('share ok');}, function(errormsg){alert(errormsg);});
	}

});